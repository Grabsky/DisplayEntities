plugins {
    id("java-library")
    id("de.eldoria.plugin-yml.paper") version "0.7.1"
}

final String VERSION = "1.0.0"
final String RUN_NUMBER = System.getenv("GITHUB_RUN_NUMBER") ?: "DEV"

group = "cloud.grabsky"
version = "$VERSION+$RUN_NUMBER"

repositories {
    mavenLocal()
    mavenCentral()
    // Repository for the Paper API.
    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    // Repository for the PacketEvents API.
    maven { url = "https://repo.codemc.io/repository/maven-snapshots/" }
    // Repository for the PlaceholderAPI, API.
    maven { url = "https://repo.extendedclip.com/content/repositories/placeholderapi/" }
}

dependencies {
    // Lombok
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")
    // Paper API
    compileOnly("io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT")
    // Plugin libraries and other runtime dependencies. Downloading and loading handled by Paper's Plugin Loader API.
    paperLibrary("io.github.revxrsal:lamp.common:4.0.0-rc.11")
    paperLibrary("io.github.revxrsal:lamp.bukkit:4.0.0-rc.11")
    paperLibrary("io.github.revxrsal:spec:1.4")
    // Plugin runtime dependencies.
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.github.retrooper:packetevents-spigot:2.8.0-SNAPSHOT")
}

tasks {
    compileJava {
        options.fork = true
        options.compilerArgs += "-parameters"
        // Setting compatibility to Java 21 and higher.
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
}

paper {
    main = "cloud.grabsky.displayentities.DisplayEntities"
    loader = "cloud.grabsky.displayentities.DisplayEntities\$PluginLoader"
    apiVersion = "1.21"
    generateLibrariesJson = true
    serverDependencies {
        "PlaceholderAPI" { load = "BEFORE"; required = false }
        "packetevents"   { load = "BEFORE"; required = false }
    }
}

// Returns formatted release name. (for GitHub Actions)
tasks.register("getRelease", () -> print("$VERSION #$RUN_NUMBER"))

// Returns formatted tag name. (for GitHub Actions)
tasks.register("getTag", () -> print("$VERSION+$RUN_NUMBER"))